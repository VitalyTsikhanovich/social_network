{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","event","currentTarget","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","cont","src","photos","large","userPhoto","alt","fullName","lookingForAJobDescription","contacts","vk","Post","item","message","countsLike","MyPosts","React","memo","postsElement","posts","map","p","AddMyPostFormRedux","onSubmit","values","addPost","newPostText","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPostContainer","connect","state","profilePage","dispatch","addPostAC","Profile","content","MyPostsContainer","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","id","isAuth","withRouter"],"mappings":"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","file":"static/js/3.c92183c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2SAaG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discrip\":\"ProfileInfo_discrip__30xC9\",\"cont\":\"ProfileInfo_cont__21FHu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3m-Qy\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\nuseEffect(()=>{\r\nsetStatus(props.status)\r\n}, [props.status])\r\n\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n        // setStatus('')\r\n    }\r\n\r\n    let deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    let onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status}\r\n                       onChange={onStatusChange} autoFocus={true}\r\n                       onBlur={deActivateEditMode}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks","import s from \"./ProfileInfo.module.css\"\r\nimport React from \"react\";\r\nimport Preloader from \"../../common/Preloader/ Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../common/assets/img/userPhoto.png\";\r\ntype ProfileInfoProps = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: string\r\n}\r\n\r\nfunction ProfileInfo({profile, status, updateStatus}: ProfileInfoProps) {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.cont}>\r\n                <img src={profile.photos.large || userPhoto} alt={'user photo'}/>\r\n            </div>\r\n\r\n            <div>\r\n                <p>Имя: {profile.fullName}</p>\r\n            </div>\r\n            <div>\r\n                <p>{profile.lookingForAJobDescription}</p>\r\n            </div>\r\n            <div>\r\n                <p>{profile.contacts.vk}</p>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import s from './Post.module.css'\r\nimport React from \"react\";\r\n type PostPropsType ={\r\n     message: string,\r\n     countsLike: number\r\n}\r\nfunction Post (props: PostPropsType){\r\n\r\n    return(\r\n        <div className={s.item}>\r\n            <img src=\"https://avatars.mds.yandex.net/get-mpic/1927699/img_id1320871121397965407.jpeg/orig\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like{props.countsLike}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import s from './MyPosts.module.css'\r\nimport React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    countsLike: number\r\n}\r\n\r\nexport type PropsArray = {\r\n    posts: Array<PostsType>\r\n\r\n    newPostText: string\r\n    // changeUpdateText: (text: string) => void\r\n\r\n    addPost:(newPostText: string)=> void;\r\n}\r\n// shouldComponentUpdate(nextProps: Readonly<PropsArray>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n//     return  nextProps != this.props || nextState != this.state\r\n// }\r\n\r\nconst MyPosts= React.memo((props:PropsArray)=> {\r\n\r\n    let postsElement = props.posts.map(p => <Post message={p.message} countsLike={p.countsLike}/>)\r\n    // let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n    // let onAddPost = () => {\r\n    //     props.addPost()\r\n        // props.dispatch(addPostAC(props.newPostText))\r\n\r\n\r\n    // }\r\n    let onAddPost = (values: PropsArray ) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    // const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //\r\n    //     let text = e.currentTarget.value\r\n    //     props.changeUpdateText(text)\r\n    //     // props.dispatch({type: \"CHANGE-NEW-TEXT\", newText: value})\r\n    //     // props.dispatch(newTextChangeHandlerAC(value))\r\n    //\r\n    // }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>new post</h3>\r\n            </div>\r\n\r\n            {/*<textarea onChange={newTextChangeHandler} value={props.newPostText}/>*/}\r\n            {/*<button onClick={onAddPost}>Add post</button>*/}\r\n            <AddMyPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength = maxLengthCreator(6)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PropsArray>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newPostText'}\r\n                   validate={[required, maxLength ]}\r\n                   placeholder={'enter post'}>\r\n            </Field>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm<PropsArray>({\r\n    // a unique name for the form   уникальное имя\r\n    form: 'profileAddNewPostForm'\r\n})(AddNewPostForm)\r\n\r\n\r\nexport default MyPosts","import React from \"react\";\r\nimport {addPostAC,  PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\n// export type PostsType = {\r\n//     id: number\r\n//     message: string\r\n//     countsLike: number\r\n// }\r\n\r\nexport type PropsArrayContainer = {\r\n    // posts: Array<PostsType>\r\n    // addPost: () => void\r\n    // changeUpdateText: (value: string) => void\r\n    // newPostText: string\r\n    // dispatch: (action: ActionsType) => void\r\n    // store: StoreType\r\n    // state: RootStateProps\r\n}\r\n\r\n\r\n// function MyPostsContainer(props: PropsArrayContainer) {\r\n//\r\n//     return (\r\n// <StoreContext.Consumer>\r\n//     {store =>{\r\n//         let postsElement = store.getState().profilePage.posts.map(p => <Post message={p.message} countsLike={p.countsLike}/>)\r\n//         // let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n//\r\n//         let addPost = () => {\r\n//             store.dispatch(addPostAC(store.getState().profilePage.newPostText))\r\n//             // props.addPost()\r\n//         }\r\n//\r\n//         let newTextChangeHandler = (text: string) => {\r\n//             store.dispatch(newTextChangeHandlerAC(text))\r\n//             // props.changeUpdateText(value)\r\n//             // props.dispatch({type: \"CHANGE-NEW-TEXT\", newText: value})\r\n//         }\r\n//         return  <MyPosts posts={store.getState().profilePage.posts}\r\n//                          addPost={addPost}\r\n//                          newPostText={store.getState().profilePage.newPostText}\r\n//                          changeUpdateText={newTextChangeHandler}/>\r\n//     }\r\n//\r\n//     }\r\n//\r\n// </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\ntype  MapStatePropsType={\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchType= {\r\n    addPost: (newPostText: string)=>void\r\n    // changeUpdateText: (text: string) =>void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n        addPost:(newPostText: string)=> {\r\n            dispatch(addPostAC(newPostText))\r\n         },\r\n        // changeUpdateText: (text)=>{\r\n        //     dispatch(newTextChangeHandlerAC(text))\r\n        // }\r\n    }\r\n}\r\n\r\nexport let MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostContainer","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport MyPosts, {PropsArray} from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {PropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\n\r\nfunction Profile(props: PropsType) {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUsersProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport { withRouter} from 'react-router-dom';\r\nimport {RouteComponentProps} from 'react-router';\r\n\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchType\r\nexport type  MapStatePropsType = {\r\n    profile: null\r\n    status: string\r\n    updateStatus: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\nexport type MapDispatchType = {\r\n    getUsersProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n}\r\n\r\nexport type PropsType = RouteComponentProps<PathParamsType> & UsersPropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile (){\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId)\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId)\r\n\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n       this.refreshProfile()\r\n       }\r\n\r\n\r\n       componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if( this.props.match.params.userId != prevProps.match.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n\r\n       }\r\n\r\n    render() {\r\n        // if (!this.props.isAuth) return <Redirect to={\"/login\"}/>        //this.props.isAuth === false\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n   status: state.profilePage.status,\r\n    updateStatus: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n    // isAuth: state.auth.isAuth\r\n})\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n// export default WithAuthRedirect(withRouter(connect(mapStateToProps, {getUsersProfile})(ProfileContainer)))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUsersProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // WithAuthRedirect           //?\r\n)(ProfileContainer)"],"sourceRoot":""}
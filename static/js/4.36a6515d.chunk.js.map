{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","src","alt","to","name","Message","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogPage","dialogElement","dialogs","map","d","messagesElement","messages","m","dialogsItems","values","onSendMessageClick","newMessageBody","mapStateToProps","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","resProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sFCapMC,MAVf,SAAoBC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,sBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,UACI,qBAAKC,IAAI,sFAAsFC,IAAI,KACnG,cAAC,IAAD,CAASC,GAAIR,EAAb,SAAoBD,EAAMU,WCGvBC,MAPf,SAAiBX,GAEb,OACI,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMY,W,yCCoBrCC,EAAYC,YAAiB,GAe3BC,EAAsBC,YAAiB,CAEzCC,KAAM,wBAFkBD,EAd+B,SAAChB,GACxD,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAM,iBAC3Ba,SAAU,CAACC,IAAUX,GACrBY,YAAa,kBAEpB,8BACI,oGAyDDC,MA7Cf,SAAiB1B,GACb,IAAI2B,EAAQ3B,EAAM4B,WACdC,EAAgBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMR,GAAI8B,EAAE9B,QACvE+B,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,aAkBlE,OACI,sBAAKT,UAAWC,IAAE0B,QAAlB,UACI,qBAAK3B,UAAWC,IAAEgC,aAAlB,SACKP,IAGL,sBAAK1B,UAAWC,IAAE8B,SAAlB,UACI,8BACKD,IAEL,8BACI,8BACI,cAAClB,EAAD,CAAqBG,SAvBrB,SAACmB,GACjBrC,EAAMsC,mBAAmBD,EAAOE,8B,sCClDpCC,EAAkB,SAACb,GACnB,MAAO,CACHc,OAAQd,EAAMe,KAAKD,SC6EZE,sBACXC,aAtBkB,SAACjB,GACnB,MAAO,CACHC,WAAYD,EAAMC,eAID,SAACiB,GACtB,MAAO,CACHP,mBAAoB,SAACC,GACjBM,EAASC,YAAcP,UD5D5B,SAA8BQ,GASjC,OADqCH,YAAQJ,EAARI,EAPb,SAAC5C,GAA+B,IAC/CyC,EAAuBzC,EAAvByC,OAAWO,EADmC,YACvBhD,EADuB,YAEnD,OAAKyC,EAED,cAACM,EAAD,eAAeC,IAFC,cAAC,IAAD,CAAUvC,GAAI,gBCqE3BkC,CAGbjB","file":"static/js/4.36a6515d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__cGSr-\",\"dialogsItems\":\"Dialogs_dialogsItems__1msEe\",\"active\":\"Dialogs_active__XQaDw\",\"dialog\":\"Dialogs_dialog__2AoVl\",\"messages\":\"Dialogs_messages__2FIf0\",\"message\":\"Dialogs_message__20qZZ\"};","import s from \"../Dialogs.module.css\";\r\nimport {DialogsPropsType} from './../Dialogs'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nfunction DialogItem(props: DialogsPropsType) {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <img src=\"https://avatars.mds.yandex.net/get-mpic/1927699/img_id1320871121397965407.jpeg/orig\" alt=\"\"/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import s from \"../Dialogs.module.css\";\r\nimport {MessagePropsType} from './../Dialogs'\r\n\r\n\r\n\r\nfunction Message(props: MessagePropsType) {\r\n\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {InitStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport type Props = {\r\n    dialogPage: InitStateType\r\n    // onNewMessageChange: (body: string) => void\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n    // addNewMessage: ()=> void\r\n    isAuth: boolean\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(6)\r\nconst AddMessageForm: React.FC<InjectedFormProps<Props>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newMessageBody'}\r\n                   validate={[required, maxLength ]}\r\n                   placeholder={'enter message'}>\r\n            </Field>\r\n            <div>\r\n                <button>отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<Props>({\r\n    // a unique name for the form   уникальное имя\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\n\r\nfunction Dialogs(props: Props) {\r\n    let state = props.dialogPage\r\n    let dialogElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElement = state.messages.map(m => <Message message={m.message}/>)\r\n    // let newMessageBody = state.newMessageBody\r\n    // let onSendMessageClick = () => {\r\n        // props.onSendMessageClick()\r\n        // props.dispatch(sendMessageAC())\r\n    // }\r\n\r\n    let addNewMessage = (values: Props) => {\r\n        props.onSendMessageClick(values.newMessageBody)\r\n    }\r\n\r\n    // let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.currentTarget.value\r\n    //     props.onNewMessageChange(body)\r\n    //     // props.dispatch(newMessageBodyAC(body))\r\n    // }\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>      //(props.isAuth === false\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElement}\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs","import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType={\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType=> {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect <T>(Component:ComponentType<T>) {\r\n    const RedirectComponent=(props: mapStateToPropsType) =>{\r\n        let {isAuth, ...resProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>        //this.props.isAuth === false\r\n        return (\r\n            <Component {...resProps as T}/>\r\n        )\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n\r\n}","import React from \"react\";\r\nimport {InitStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch, compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\n// export type DialogsPropsType = {\r\n//     name: string\r\n//     id: number\r\n// }\r\n\r\n// export type MessagePropsType = {\r\n//     message: string\r\n// }\r\n\r\nexport type ContainerProps = {\r\n    // dialogs: Array<DialogsPropsType>\r\n    //  messages: Array<MessagePropsType>\r\n    // dialogPage: DialogPageType\r\n    // dispatch: (action: ActionsType) => void\r\n\r\n}\r\nexport type DialogPropType = MapStatePropsType | MapDispatchType\r\n\r\n\r\n// function DialogsContainer(props: ContainerProps) {\r\n//     // let state = props.dialogPage\r\n//     //\r\n//     // let onSendMessageClick = () => {\r\n//     //     props.dispatch(sendMessageAC())\r\n//     // }\r\n//     // let onNewMessageChange = (body: string) => {\r\n//     //     props.dispatch(newMessageBodyAC(body))\r\n//     // }\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {store => {\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageAC())\r\n//                 }\r\n//                 let onNewMessageChange = (body: string) => {\r\n//                     store.dispatch(newMessageBodyAC(body))\r\n//                 }\r\n//                 return <Dialogs dialogPage={store.getState().dialogPage}\r\n//                                 newMessageBody={onNewMessageChange}\r\n//                                 sendMessage={onSendMessageClick}/>\r\n//             }\r\n//\r\n//             }\r\n//\r\n//         </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\ntype  MapStatePropsType = {\r\n    dialogPage: InitStateType\r\n    // isAuth: boolean\r\n}\r\ntype MapDispatchType = {\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n    // onNewMessageChange: (body: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n        // isAuth: state.auth.isAuth    //??\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n// compose(\r\n//     connect(mapStateToProps, mapDispatchToProps),\r\n//     WithAuthRedirect\r\n// )(Dialogs)\r\n\r\n\r\n// export let SuperDialogsContainer = WithAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}
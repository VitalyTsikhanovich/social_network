{"version":3,"sources":["redux/dialogs-reducer.ts","components/Navbar/Navbar.module.css","components/Users/Users.module.css","api/api.ts","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Setting/Setting.tsx","redux/users-reducer.ts","utils/paginator/paginator.tsx","components/common/assets/img/userPhoto.png","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/common/assets/img/klipartz.com.png","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","App.tsx","redux/redux-store.ts","index.tsx","components/common/assets/img/Rocket.gif","components/common/Preloader/ Preloader.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","utils/paginator/paginator.module.css","components/Header/Header.module.css","components/common/FormsControls/FormsControls.module.css","redux/profile-reducer.ts"],"names":["initialState","dialogs","id","name","messages","message","sendMessageAC","newMessageBody","type","dialogsReducer","state","action","body","module","exports","instance","axios","create","withCredentials","headers","baseURL","userAPI","getUsers","currentPage","pageSize","get","params","page","count","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileApi","getStatus","updateStatus","status","put","authApi","me","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","activeClassName","active","Music","News","Setting","users","totalUsersCount","isFetching","followingInProgress","portionSize","followsSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","map","u","followed","filter","Paginator","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","p","cn","styles","selectedPage","pageNumber","e","User","user","src","photos","small","userPhoto","style","photo","alt","disabled","some","Users","props","createSelector","usersPage","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getPageSize","getPortionSize","UsersContainer","this","React","Component","compose","connect","bind","items","totalCount","Header","header","logo","loginBlock","isAuth","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","required","component","Input","error","length","stopSubmit","_error","formData","initialized","appReducer","ProfileContainer","lazy","DialogsContainer","App","initializeApp","path","render","fallback","app","promise","Promise","all","rootReducer","combineReducers","profilePage","profileReducer","dialogPage","formReducer","store","createStore","applyMiddleware","thunk","renderTree","ReactDOM","StrictMode","basename","process","document","getElementById","subscribe","Preloader","preloader","FormControl","input","meta","children","hasError","touched","formControl","Textarea","resProps","value","maxLengthCreator","maxLength","values","posts","countsLike","profile","newPostText","postId","addPostAC","setStatus","getUsersProfile","newPost","Date","getTime"],"mappings":"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","file":"static/js/main.787e2b03.chunk.js","sourcesContent":["\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Иван'},\r\n        {id: 2, name: 'Сергей'},\r\n        {id: 3, name: 'Леша'},\r\n        {id: 4, name: 'Маша'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Привет'},\r\n        {id: 1, message: 'Y'},\r\n        {id: 1, message: 'Как дела'}\r\n    ] as Array<MessageType>\r\n}\r\n\r\nexport type InitStateType = typeof initialState\r\n\r\nconst dialogsReducer = (state: InitStateType = initialState, action: ActionsType): InitStateType => {\r\n    // let stateCopy\r\n    switch (action.type) {\r\n        // case 'NEW-MESSAGE-BODY':\r\n       // return    {\r\n                // ...state,\r\n                // newMessageBody: action.body\r\n            // }\r\n            // stateCopy.newMessageBody = action.body\r\n            // state.newMessageBody = action.body\r\n            // return stateCopy\r\n                                                   // break\r\n        case 'SEND-MESSAGE':\r\n\r\n            let body = action.newMessageBody\r\n            // stateCopy=\r\n           return      {\r\n                ...state,\r\n\r\n                messages: [...state.messages, {id: 6, message: body}]                 //вместо push\r\n            }\r\n\r\n            // let stateCopy = {...state}\r\n            // stateCopy.messages = [...state.messages]\r\n            // stateCopy.messages.push({id: 6, message: body})\r\n            // stateCopy.newMessageBody = ''\r\n            // state.messages.push({id: 6, message: body})\r\n            // state.newMessageBody = ''\r\n            // return stateCopy\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\nexport let sendMessageAC = (newMessageBody: string) => ({type: 'SEND-MESSAGE',newMessageBody} as const)\r\n// export let newMessageBodyAC = (body: string) => ({type: 'NEW-MESSAGE-BODY', body: body} as const)\r\n\r\ntype ActionsType = ReturnType<typeof sendMessageAC>\r\n\r\n\r\nexport default dialogsReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2vU54\",\"item\":\"Navbar_item__2g_Jy\",\"active\":\"Navbar_active__3kNNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__3VIZf\",\"selectedPage\":\"Users_selectedPage__25PuR\"};","import axios from \"axios\"\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"2e1e5f93-3f47-4490-9036-0bbeeb44f187\"\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users`, {\r\n            params: {\r\n                page: currentPage,\r\n                count: pageSize\r\n            }\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    follow(userId: number) {\r\n\t\treturn instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string){\r\n        console.warn('Obsolete method. Please profileApi object')\r\n        return profileApi.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile(userId: string){\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put(`profile/status/` , {status: status})\r\n    }\r\n}\r\n\r\nexport const authApi =  {\r\n    me(){\r\n     return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe= false){\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    }\r\n\r\n\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import s from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction Navbar (){\r\n    return(\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active} > Profile</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Message</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}> Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/setting\" activeClassName={s.active}>Setting</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <NavLink to=\"/sidebar\" activeClassName={s.active}>Sidebar</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import s from './Music.module.css'\r\nimport React from \"react\";\r\n\r\nfunction Music (){\r\n    return(\r\n        <div>\r\n    music\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","import s from './News.module.css'\r\nimport React from \"react\";\r\n\r\nfunction News (){\r\n    return(\r\n        <div>\r\n    news\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","import s from './Setting.module.css'\r\nimport React from \"react\";\r\n\r\nfunction Setting (){\r\n    return(\r\n        <div>\r\n    setting\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting","import {userAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: { sity: string, country: string }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    portionSize: number\r\n\r\n}\r\n\r\nexport const initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<Number>,\r\n    portionSize: 15\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n                 users:\r\n                state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]   //старые юзеры + новые\r\n            }\r\n        case 'SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET-TOTAL-USERS-COUNT\":\r\n            return {...state, totalUsersCount: action.count}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let followsSuccess = (userId: number) => ({type: \"FOLLOW\", userId} as const)\r\nexport let unfollowSuccess = (userId: number) => ({type: \"UNFOLLOW\", userId} as const)\r\nexport let setUsers = (users: Array<UsersType>) => ({type: \"SET-USERS\", users} as const)\r\nexport let setCurrentPage = (currentPage: number) => ({type: \"SET-CURRENT-PAGE\", currentPage} as const)\r\nexport let setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SET-TOTAL-USERS-COUNT\",\r\n    count: totalUsersCount\r\n} as const)\r\nexport let toggleIsFetching = (isFetching: boolean) => ({type: \"TOGGLE-IS-FETCHING\", isFetching} as const)\r\nexport let toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let data = await userAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nlet followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,{}, {\r\n    //     withCredentials: true,\r\n    //     headers: {\r\n    //         \"API-KEY\": \"45e88326-78f0-45ca-b953-491c7fd66778\"\r\n    //     }\r\n    //     })\r\n\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userId), followsSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userId), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof followsSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport default usersReducer","import react, {useState} from 'react'\r\nimport cn from 'classnames'\r\nimport styles from './paginator.module.css'\r\nimport style from \"../../components/Users/Users.module.css\";\r\n// import React from \"react\";\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize: number\r\n}\r\n\r\nlet Paginator = ({currentPage, totalUsersCount, pageSize, onPageChanged, portionSize}: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV </button>\r\n                }\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span className={cn({\r\n                            [styles.selectedPage]: currentPage === p\r\n                        }, styles.pageNumber)}\r\n                                     key={p}\r\n                                     onClick={(e) => {\r\n                                         onPageChanged(p)\r\n                                     }}>{p} </span>\r\n                    })}\r\n                {portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT </button>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Paginator\r\n","export default __webpack_public_path__ + \"static/media/userPhoto.a6143582.png\";","import style from \"./Users.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../common/assets/img/userPhoto.png\";\r\nimport React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<Number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\n\r\nlet User = ({user, followingInProgress, unfollow, follow, ...props}: UserPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n\r\n        <span>\r\n            <div>\r\n               <NavLink to={'/profile/' + user.id}>\r\n <img src={user.photos.small != null ? user.photos.small : userPhoto} className={style.photo} alt={'avatar'}/>\r\n               </NavLink>\r\n    </div>\r\n    <div>\r\n    {user.followed\r\n        ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n            unfollow(user.id)\r\n\r\n        }}> UnFollow</button>\r\n        : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n\r\n            follow(user.id)\r\n\r\n\r\n        }}> Follow</button>}\r\n\r\n\r\n    </div>\r\n    </span>\r\n            <span>\r\n    <span>\r\n        <div>\r\n            {user.name}\r\n    </div>\r\n    <div> {user.status}</div>\r\n    </span>\r\n    <span>\r\n    <div> {'u.location.country'}</div>\r\n    <div> {'u.location.sity'}</div>\r\n    </span>\r\n    </span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default User\r\n\r\n","import React from \"react\";\r\nimport {MapDispatchType, MapStatePropsType} from \"./UsersContainer\";\r\nimport Paginator from \"../../utils/paginator/paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchType & UsersAPITypeProps\r\n\r\nexport type UsersAPITypeProps = {\r\n    onPageChanged: (p: number) => void\r\n}\r\n\r\nlet Users = ({totalUsersCount, pageSize, currentPage, onPageChanged, portionSize, ...props}: UsersPropsType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage} onPageChanged={onPageChanged} totalUsersCount={totalUsersCount}\r\n                       pageSize={pageSize} portionSize={portionSize}/>\r\n            {\r\n                props.users.map(u => <User key={u.id} user={u}\r\n                                           followingInProgress={props.followingInProgress}\r\n                                           follow={props.follow}\r\n                                           unfollow={props.unfollow}/>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Users\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\n\r\nexport const  getUsersSelect =(state:AppStateType)=>{\r\n    return state.usersPage.users\r\n}\r\nexport const  getUsers = createSelector(getUsersSelect,(users)=>{\r\n    return  users.filter(u=> true)\r\n})\r\n\r\n\r\n\r\n\r\nexport const  getTotalUsersCount =(state:AppStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const  getCurrentPage =(state:AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const  getIsFetching =(state:AppStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const  getFollowingInProgress =(state:AppStateType)=>{\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const  getPageSize =(state:AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const  getPortionSize =(state:AppStateType)=>{\r\n    return state.usersPage.portionSize\r\n}","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow, getUsersThunkCreator, InitialStateType,\r\n    setCurrentPage, toggleFollowingProgress,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/ Preloader\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching, getPageSize, getPortionSize,\r\n    getTotalUsersCount, getUsers,\r\n\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchType & InitialStateType\r\n\r\nexport type  MapStatePropsType = InitialStateType\r\n// {\r\n// users: UsersType[],\r\n//     pageSize: number\r\n//     totalUsersCount: number\r\n//     currentPage: number\r\n//     isFetching: boolean\r\n//     followingInProgress: InitialStateType []\r\n//\r\n// }\r\n\r\nexport type MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n\r\n    setCurrentPage: (pageNumber: number) => void\r\n\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    constructor(props: UsersPropsType) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount() {\r\nlet {pageSize, currentPage} = this.props\r\n        this.props.getUsers(pageSize, currentPage)\r\n\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // this.props.toggleIsFetching(true)\r\n        // userAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users users={this.props.users} pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount} currentPage={this.props.currentPage}\r\n                   follow={this.props.follow} unfollow={this.props.unfollow}\r\n                   setCurrentPage={this.props.setCurrentPage}\r\n                   onPageChanged={this.onPageChanged} isFetching={this.props.isFetching}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   getUsers={this.props.getUsers} portionSize={this.props.portionSize}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: getPortionSize(state)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            follow, unfollow,\r\n            setCurrentPage,\r\n            toggleFollowingProgress,\r\n            getUsers: getUsersThunkCreator\r\n        }),\r\n// WithAuthRedirect\r\n)(UsersContainer)","export default __webpack_public_path__ + \"static/media/klipartz.com.cc744079.png\";","import s from './Header.module.css'\r\nimport logo from '../common/assets/img/klipartz.com.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UsersPropsType} from \"./HeaderContainer\";\r\n\r\n\r\nfunction Header(props: UsersPropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n\r\n            <img src={logo} alt=\"logo\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div> {props.login}  <button onClick={props.logout}> Log out</button> </div>\r\n                :<NavLink to={'/login'}>Login </NavLink>}\r\n                {/*{props.isAuth ? props.email*/}\r\n                {/*:<NavLink to={'/login'}>Email </NavLink>}*/}\r\n\r\n            </div>\r\n        </header>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Header","import {authApi} from \"../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nexport type AuthType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nexport const initialState: AuthType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\" :\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                // id: action.payload.id,\r\n                // email: action.payload.email,\r\n                // login: action.payload.login,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// export let follow = (userId: number) => ({type: \"FOLLOW\", userId} as const)\r\n// export let unfollow = (userId: number) => ({type: \"UNFOLLOW\", userId} as const)\r\n// export let setUsers = (users: Array<AuthType>) => ({type: \"SET-USERS\", users} as const)\r\n// export let setCurrentPage = (currentPage: number) => ({type: \"SET-CURRENT-PAGE\", currentPage} as const)\r\n// export let setTotalUsersCount = (totalUsersCount: number) => ({type: \"SET-TOTAL-USERS-COUNT\", count: totalUsersCount} as const)\r\n// export let toggleIsFetching = (isFetching: boolean) => ({type: \"TOGGLE-IS-FETCHING\", isFetching} as const)\r\n\r\nexport let setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => (\r\n    {type: \"SET-USER-DATA\", payload: {id, email, login, isAuth}} as const)\r\n\r\nexport let getAuthUserData = () => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n    let response = await authApi.me()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n\r\n}\r\n\r\nexport let login = (email: string, password: string, rememberMe: boolean) =>\r\n    async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n\r\n        let response = await authApi.login(email, password, rememberMe)\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            dispatch<any>(stopSubmit('login', {_error: message}))\r\n        }\r\n\r\n    }\r\n\r\nexport let logout = () => async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n    let response = await authApi.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n\r\nexport default authReducer","import React from \"react\";\r\nimport Header from \"./Header\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\n\r\nexport type MapDispatchType={\r\n    getAuthUserData: ()=>void\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MapStatePropsType={\r\n    id: number | null\r\n    email:  string | null\r\n    login: string | null,\r\n    isAuth: boolean\r\n}\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchType\r\n\r\nclass HeaderContainer extends React.Component<UsersPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n\r\n\r\nexport let mapStateToProps = (state:AppStateType): MapStatePropsType =>({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    email: state.auth.email,\r\n    id: state.auth.id\r\n})\r\n\r\nexport default connect (mapStateToProps, { logout}) (HeaderContainer)","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'}\r\n                       validate={[required]}\r\n                       name={'email'} component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'Password'}\r\n                       validate={[required]}\r\n                       name={'password'} type={'password'}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field component={'input'} name={'rememberMe'} type={'checkbox'}/> remember me\r\n            </div>\r\n\r\n                <div>\r\n                    {props.error}\r\n                </div>\r\n\r\n\r\n            <div>\r\n                <button> Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form   уникальное имя\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = ({...props}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n        // console.log(formData)\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nexport type AppType = {\r\n    initialized: boolean\r\n}\r\n\r\nexport const initialState: AppType = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED-SUCCESS\":\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let initializedSuccess = () => (\r\n    {type: \"INITIALIZED-SUCCESS\"} as const)\r\n\r\nexport let initializeApp = () =>\r\n    (dispatch: ThunkDispatch<AppStateType, unknown, ActionsType>) => {\r\n        let promise = dispatch(getAuthUserData())\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(initializedSuccess())\r\n            })\r\n    }\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof initializedSuccess>\r\n\r\nexport default appReducer","import React ,{ Suspense } from \"react\";\r\nimport './App.css'\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Music from \"./components/Music/Music\"\r\nimport { Switch, Route} from \"react-router-dom\";\r\nimport News from \"./components/News/News\";\r\nimport Setting from \"./components/Setting/Setting\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData} from \"./redux/auth-reducer\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/common/Preloader/ Preloader\";\r\n\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n\r\n\r\ntype AppPropsType = {\r\n    // posts: Array<PostsType>\r\n    // messages: Array<MessagePropsType>\r\n    // // dialogs:Array<DialogsPropsType>\r\n    // changeNewText: (newText: string) => void\r\n    // store: StoreType\r\n    // state: RootStateProps\r\n    // addPost: () => void\r\n    // dispatch: (action: ActionsType) => void\r\n    initializeApp: ()=> void\r\n}\r\n\r\nclass App extends React.Component<AppPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        // const state = props.store.getState()\r\n        if (! this.props.initializeApp) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                    <div className='app-wrapper'>\r\n                        <HeaderContainer getAuthUserData={getAuthUserData}/>\r\n                        <Navbar/>\r\n\r\n                        <div className={'app-wrapper-content'}>\r\n                            <Switch>\r\n                                <Route path='/profile/:userId?' render={() => {\r\n                                    return <Suspense fallback={<Preloader/>} >\r\n                                     <ProfileContainer/>\r\n                                 </Suspense>\r\n                                }}/>\r\n                                <Route path='/dialogs' render={() => {\r\n                                  return <Suspense fallback={<Preloader/>}>\r\n                                    <DialogsContainer/>\r\n                                  </Suspense>\r\n                                }}/>\r\n                                <Route path='/music' render={() => <Music/>}/>\r\n                                <Route path='/news' render={() => <News/>}/>\r\n                                <Route path='/setting' render={() => <Setting/>}/>\r\n                                <Route path='/users' render={() => <UsersContainer/>}/>\r\n                                <Route path='/login' render={() => <Login/>}/>\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype  MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nexport default connect(mapStateToProps, {initializeApp})(App)\r\n","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport thunk  from \"redux-thunk\"\r\nimport usersReducer from \"./users-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport  { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// import sidebarReducer from \"./sidebar-reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n    // sidebar: sidebarReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n//  const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)\r\n// ));\r\n\r\nlet store = createStore(rootReducer , applyMiddleware(thunk))\r\n\r\n\r\nexport default store","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst renderTree = () => {\r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n            </BrowserRouter>\r\n            {/*<App state={store.getState()} addPost={store.addPost} changeNewText={store.changeNewText}/>*/}\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nstore.subscribe(renderTree)\r\nrenderTree()\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/Rocket.9dd581ae.gif\";","import preloader from \"../assets/img/Rocket.gif\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nlet  Preloader =()=>{\r\n\r\n    return <div>\r\n        <img src={preloader} alt=\"icon\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader","import React from \"react\";\r\nimport style from './FormsControls.module.css'\r\nimport {WrappedFieldProps} from \"redux-form\";    // типизация форм/meta\r\n\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({input, meta, children, ...props}) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...resProps} = props\r\n    return (\r\n        <FormControl {...props}> <textarea {...input} {...resProps}/> </FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...resProps} = props\r\n    return (\r\n        <FormControl {...props}> <input {...input} {...resProps}/></FormControl>\r\n    )\r\n}","\r\n\r\nexport const required =(value: string)=>{\r\nif (value ) return undefined\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) =>(values: string)=>{\r\nif (values && values.length >maxLength ) return `Максимально ${maxLength} символов`\r\n\r\n    return undefined\r\n}\r\n\r\n// export const maxLengthCreator = (maxLength: number) = >(value)=> {\r\n//     if (value.length > maxLength) return `Max length is ${maxLength} sumbols`\r\n//     return undefined\r\n// }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"paginator_selectedPage__aQu4b\",\"pageNumber\":\"paginator_pageNumber__26tap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1I1LW\",\"loginBlock\":\"Header_loginBlock__1kEzP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__28Uil\",\"error\":\"FormsControls_error__2ecNc\"};","import {Dispatch} from \"redux\";\r\nimport {profileApi, userAPI} from \"../api/api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    countsLike: number\r\n}\r\n\r\nexport const initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Кто ты?', countsLike: 4},\r\n        {id: 1, message: 'Зачем', countsLike: 54},\r\n\r\n    ] as Array<PostType>,\r\n    profile: null,\r\n    status: \"\",\r\n    newPostText: \"\",\r\n    postId: null\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                countsLike: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case \"DELETE-POST\": {\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n// let stateCopy = {...state}\r\n// stateCopy.posts = [...state.posts]\r\n//             stateCopy.posts.push(newPost)\r\n//             stateCopy.newPostText = ''\r\n        // state.posts.push(newPost)\r\n        // state.newPostText = ''\r\n        // return stateCopy\r\n        // case 'CHANGE-NEW-TEXT': {\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     }\r\n        // }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SET-USERS-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let addPostAC = (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const)\r\nexport let deletePostAC = (postId: number) => ({type: \"DELETE-POST\", postId} as const)\r\n// export let newTextChangeHandlerAC = (value: string) => ({type: \"CHANGE-NEW-TEXT\", newText: value} as const)\r\nexport let setUsersProfile = (profile: null) => ({type: \"SET-USERS-PROFILE\", profile} as const)\r\nexport let setStatus = (status: string) => ({type: \"SET-STATUS\", status} as const)\r\n\r\nexport let getStatus = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileApi.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport let updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileApi.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport let getUsersProfile = (userId: string) => async (dispatch: Dispatch) => {       //санка\r\n    let response = await userAPI.getProfile(userId)\r\n    dispatch(setUsersProfile(response.data))\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof deletePostAC>\r\n    // | ReturnType<typeof newTextChangeHandlerAC>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport default profileReducer"],"sourceRoot":""}
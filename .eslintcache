[{"D:\\it-camasutra\\social_network\\src\\reportWebVitals.ts":"1","D:\\it-camasutra\\social_network\\src\\redux\\app-reducer.ts":"2","D:\\it-camasutra\\social_network\\src\\components\\News\\News.tsx":"3","D:\\it-camasutra\\social_network\\src\\components\\Users\\UsersContainer.tsx":"4","D:\\it-camasutra\\social_network\\src\\components\\Navbar\\Navbar.tsx":"5","D:\\it-camasutra\\social_network\\src\\components\\common\\Preloader\\ Preloader.tsx":"6","D:\\it-camasutra\\social_network\\src\\api\\api.ts":"7","D:\\it-camasutra\\social_network\\src\\components\\Users\\Users.tsx":"8","D:\\it-camasutra\\social_network\\src\\utils\\validators\\validators.ts":"9","D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\Message\\Message.tsx":"10","D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"11","D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"12","D:\\it-camasutra\\social_network\\src\\components\\Setting\\Setting.tsx":"13","D:\\it-camasutra\\social_network\\src\\components\\Profile\\Profile.tsx":"14","D:\\it-camasutra\\social_network\\src\\redux\\users-selectors.ts":"15","D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"16","D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"17","D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"18","D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\Dialogs.tsx":"19","D:\\it-camasutra\\social_network\\src\\index.tsx":"20","D:\\it-camasutra\\social_network\\src\\App.tsx":"21","D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\DialogsContainer.tsx":"22","D:\\it-camasutra\\social_network\\src\\components\\common\\FormsControls\\FormsControls.tsx":"23","D:\\it-camasutra\\social_network\\src\\redux\\profile-reducer.ts":"24","D:\\it-camasutra\\social_network\\src\\redux\\auth-reducer.ts":"25","D:\\it-camasutra\\social_network\\src\\components\\Header\\Header.tsx":"26","D:\\it-camasutra\\social_network\\src\\redux\\users-reducer.ts":"27","D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"28","D:\\it-camasutra\\social_network\\src\\utils\\object-helpers.ts":"29","D:\\it-camasutra\\social_network\\src\\components\\Login\\Login.tsx":"30","D:\\it-camasutra\\social_network\\src\\redux\\redux-store.ts":"31","D:\\it-camasutra\\social_network\\src\\components\\Header\\HeaderContainer.tsx":"32","D:\\it-camasutra\\social_network\\src\\hoc\\WithAuthRedirect.tsx":"33","D:\\it-camasutra\\social_network\\src\\utils\\paginator\\paginator.tsx":"34","D:\\it-camasutra\\social_network\\src\\components\\Users\\User.tsx":"35","D:\\it-camasutra\\social_network\\src\\redux\\dialogs-reducer.ts":"36","D:\\it-camasutra\\social_network\\src\\components\\Music\\Music.tsx":"37","D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileContainer.tsx":"38","D:\\it-camasutra\\social_network\\src\\hoc\\WithSuspense.tsx":"39"},{"size":440,"mtime":1620404244911,"results":"40","hashOfConfig":"41"},{"size":1103,"mtime":1620404244909,"results":"42","hashOfConfig":"41"},{"size":171,"mtime":1620404244900,"results":"43","hashOfConfig":"41"},{"size":3500,"mtime":1624619603330,"results":"44","hashOfConfig":"41"},{"size":1194,"mtime":1620404244899,"results":"45","hashOfConfig":"41"},{"size":212,"mtime":1620404244904,"results":"46","hashOfConfig":"41"},{"size":1520,"mtime":1621671063346,"results":"47","hashOfConfig":"41"},{"size":1080,"mtime":1624619150528,"results":"48","hashOfConfig":"41"},{"size":505,"mtime":1620404244912,"results":"49","hashOfConfig":"41"},{"size":245,"mtime":1620404244898,"results":"50","hashOfConfig":"41"},{"size":2591,"mtime":1620404244900,"results":"51","hashOfConfig":"41"},{"size":511,"mtime":1620404244901,"results":"52","hashOfConfig":"41"},{"size":183,"mtime":1620404244902,"results":"53","hashOfConfig":"41"},{"size":575,"mtime":1620404244901,"results":"54","hashOfConfig":"41"},{"size":900,"mtime":1624617096243,"results":"55","hashOfConfig":"41"},{"size":510,"mtime":1620404244897,"results":"56","hashOfConfig":"41"},{"size":1075,"mtime":1624904424154,"results":"57","hashOfConfig":"41"},{"size":1145,"mtime":1620417683585,"results":"58","hashOfConfig":"41"},{"size":2917,"mtime":1620404244897,"results":"59","hashOfConfig":"41"},{"size":1069,"mtime":1624885314464,"results":"60","hashOfConfig":"41"},{"size":3429,"mtime":1624807395303,"results":"61","hashOfConfig":"41"},{"size":2762,"mtime":1620404244897,"results":"62","hashOfConfig":"41"},{"size":995,"mtime":1620404244904,"results":"63","hashOfConfig":"41"},{"size":3196,"mtime":1623790838243,"results":"64","hashOfConfig":"41"},{"size":2928,"mtime":1623779102616,"results":"65","hashOfConfig":"41"},{"size":759,"mtime":1624882926513,"results":"66","hashOfConfig":"41"},{"size":5084,"mtime":1624617270867,"results":"67","hashOfConfig":"41"},{"size":2663,"mtime":1621768483506,"results":"68","hashOfConfig":"41"},{"size":396,"mtime":1624014735211,"results":"69","hashOfConfig":"41"},{"size":2076,"mtime":1620404244899,"results":"70","hashOfConfig":"41"},{"size":1023,"mtime":1624206499414,"results":"71","hashOfConfig":"41"},{"size":912,"mtime":1620404244898,"results":"72","hashOfConfig":"41"},{"size":859,"mtime":1620404244907,"results":"73","hashOfConfig":"41"},{"size":1979,"mtime":1624619241964,"results":"74","hashOfConfig":"41"},{"size":1434,"mtime":1624618363337,"results":"75","hashOfConfig":"41"},{"size":2071,"mtime":1620404244910,"results":"76","hashOfConfig":"41"},{"size":175,"mtime":1620404244899,"results":"77","hashOfConfig":"41"},{"size":2570,"mtime":1624907766854,"results":"78","hashOfConfig":"41"},{"size":344,"mtime":1624807318368,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"bumk1a",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"85"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"85"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"85"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"85"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"85"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\it-camasutra\\social_network\\src\\reportWebVitals.ts",[],["175","176"],"D:\\it-camasutra\\social_network\\src\\redux\\app-reducer.ts",[],["177","178"],"D:\\it-camasutra\\social_network\\src\\components\\News\\News.tsx",["179"],"import s from './News.module.css'\r\nimport React from \"react\";\r\n\r\nfunction News (){\r\n    return(\r\n        <div>\r\n    news\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News","D:\\it-camasutra\\social_network\\src\\components\\Users\\UsersContainer.tsx",["180"],"import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    follow, getUsersThunkCreator, InitialStateType,\r\n    setCurrentPage, toggleFollowingProgress,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/ Preloader\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching, getPageSize, getPortionSize,\r\n    getTotalUsersCount, getUsers,\r\n\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPropsType = MapStatePropsType & MapDispatchType & InitialStateType\r\n\r\nexport type  MapStatePropsType = InitialStateType\r\n// {\r\n// users: UsersType[],\r\n//     pageSize: number\r\n//     totalUsersCount: number\r\n//     currentPage: number\r\n//     isFetching: boolean\r\n//     followingInProgress: InitialStateType []\r\n//\r\n// }\r\n\r\nexport type MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n\r\n    setCurrentPage: (pageNumber: number) => void\r\n\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, id: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    constructor(props: UsersPropsType) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount() {\r\nlet {pageSize, currentPage} = this.props\r\n        this.props.getUsers(pageSize, currentPage)\r\n\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        let {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize)\r\n        // this.props.setCurrentPage(pageNumber)\r\n        // this.props.toggleIsFetching(true)\r\n        // userAPI.getUsers(pageNumber, this.props.pageSize).then(data => {\r\n        //     this.props.toggleIsFetching(false)\r\n        //     this.props.setUsers(data.items)\r\n        //     this.props.setTotalUsersCount(data.totalCount)\r\n        // })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users users={this.props.users} pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount} currentPage={this.props.currentPage}\r\n                   follow={this.props.follow} unfollow={this.props.unfollow}\r\n                   setCurrentPage={this.props.setCurrentPage}\r\n                   onPageChanged={this.onPageChanged} isFetching={this.props.isFetching}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                   getUsers={this.props.getUsers} portionSize={this.props.portionSize}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\n\r\nexport let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: getPortionSize(state)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            follow, unfollow,\r\n            setCurrentPage,\r\n            toggleFollowingProgress,\r\n            getUsers: getUsersThunkCreator\r\n        }),\r\n// WithAuthRedirect\r\n)(UsersContainer)","D:\\it-camasutra\\social_network\\src\\components\\Navbar\\Navbar.tsx",[],"D:\\it-camasutra\\social_network\\src\\components\\common\\Preloader\\ Preloader.tsx",[],"D:\\it-camasutra\\social_network\\src\\api\\api.ts",[],"D:\\it-camasutra\\social_network\\src\\components\\Users\\Users.tsx",[],"D:\\it-camasutra\\social_network\\src\\utils\\validators\\validators.ts",[],"D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\Message\\Message.tsx",[],["181","182"],"D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["183"],"import React from \"react\";\r\nimport {addPostAC,  PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\n// export type PostsType = {\r\n//     id: number\r\n//     message: string\r\n//     countsLike: number\r\n// }\r\n\r\nexport type PropsArrayContainer = {\r\n    // posts: Array<PostsType>\r\n    // addPost: () => void\r\n    // changeUpdateText: (value: string) => void\r\n    // newPostText: string\r\n    // dispatch: (action: ActionsType) => void\r\n    // store: StoreType\r\n    // state: RootStateProps\r\n}\r\n\r\n\r\n// function MyPostsContainer(props: PropsArrayContainer) {\r\n//\r\n//     return (\r\n// <StoreContext.Consumer>\r\n//     {store =>{\r\n//         let postsElement = store.getState().profilePage.posts.map(p => <Post message={p.message} countsLike={p.countsLike}/>)\r\n//         // let newPostElement = React.createRef<HTMLTextAreaElement>()\r\n//\r\n//         let addPost = () => {\r\n//             store.dispatch(addPostAC(store.getState().profilePage.newPostText))\r\n//             // props.addPost()\r\n//         }\r\n//\r\n//         let newTextChangeHandler = (text: string) => {\r\n//             store.dispatch(newTextChangeHandlerAC(text))\r\n//             // props.changeUpdateText(value)\r\n//             // props.dispatch({type: \"CHANGE-NEW-TEXT\", newText: value})\r\n//         }\r\n//         return  <MyPosts posts={store.getState().profilePage.posts}\r\n//                          addPost={addPost}\r\n//                          newPostText={store.getState().profilePage.newPostText}\r\n//                          changeUpdateText={newTextChangeHandler}/>\r\n//     }\r\n//\r\n//     }\r\n//\r\n// </StoreContext.Consumer>\r\n//\r\n//     )\r\n// }\r\n\r\ntype  MapStatePropsType={\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\ntype MapDispatchType= {\r\n    addPost: (newPostText: string)=>void\r\n    // changeUpdateText: (text: string) =>void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType=> {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchType => {\r\n    return {\r\n        addPost:(newPostText: string)=> {\r\n            dispatch(addPostAC(newPostText))\r\n         },\r\n        // changeUpdateText: (text)=>{\r\n        //     dispatch(newTextChangeHandlerAC(text))\r\n        // }\r\n    }\r\n}\r\n\r\nexport let MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostContainer","D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"D:\\it-camasutra\\social_network\\src\\components\\Setting\\Setting.tsx",["184"],"import s from './Setting.module.css'\r\nimport React from \"react\";\r\n\r\nfunction Setting (){\r\n    return(\r\n        <div>\r\n    setting\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting","D:\\it-camasutra\\social_network\\src\\components\\Profile\\Profile.tsx",["185","186"],"import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport MyPosts, {PropsArray} from \"./MyPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {PropsType} from \"./ProfileContainer\";\r\n\r\n\r\n\r\n\r\nfunction Profile(props: PropsType) {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","D:\\it-camasutra\\social_network\\src\\redux\\users-selectors.ts",[],"D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],["187","188"],"D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["189"],"D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\Dialogs.tsx",["190","191"],"import s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {InitStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type DialogsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport type Props = {\r\n    dialogPage: InitStateType\r\n    // onNewMessageChange: (body: string) => void\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n    // addNewMessage: ()=> void\r\n    isAuth: boolean\r\n    newMessageBody: string\r\n}\r\n\r\nlet maxLength = maxLengthCreator(6)\r\nconst AddMessageForm: React.FC<InjectedFormProps<Props>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'newMessageBody'}\r\n                   validate={[required, maxLength ]}\r\n                   placeholder={'enter message'}>\r\n            </Field>\r\n            <div>\r\n                <button>отправить</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<Props>({\r\n    // a unique name for the form   уникальное имя\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\n\r\nfunction Dialogs(props: Props) {\r\n    let state = props.dialogPage\r\n    let dialogElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElement = state.messages.map(m => <Message message={m.message}/>)\r\n    // let newMessageBody = state.newMessageBody\r\n    // let onSendMessageClick = () => {\r\n        // props.onSendMessageClick()\r\n        // props.dispatch(sendMessageAC())\r\n    // }\r\n\r\n    let addNewMessage = (values: Props) => {\r\n        props.onSendMessageClick(values.newMessageBody)\r\n    }\r\n\r\n    // let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.currentTarget.value\r\n    //     props.onNewMessageChange(body)\r\n    //     // props.dispatch(newMessageBodyAC(body))\r\n    // }\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>      //(props.isAuth === false\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElement}\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs","D:\\it-camasutra\\social_network\\src\\index.tsx",[],"D:\\it-camasutra\\social_network\\src\\App.tsx",[],"D:\\it-camasutra\\social_network\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"D:\\it-camasutra\\social_network\\src\\components\\common\\FormsControls\\FormsControls.tsx",[],"D:\\it-camasutra\\social_network\\src\\redux\\profile-reducer.ts",["192"],"import {Dispatch} from \"redux\";\r\nimport {profileApi, userAPI} from \"../api/api\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    countsLike: number\r\n}\r\n\r\nexport const initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Кто ты?', countsLike: 4},\r\n        {id: 1, message: 'Зачем', countsLike: 54},\r\n\r\n    ] as Array<PostType>,\r\n    profile: null,\r\n    status: \"\",\r\n    newPostText: \"\",\r\n    postId: null\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST':\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                countsLike: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        case \"DELETE-POST\": {\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n// let stateCopy = {...state}\r\n// stateCopy.posts = [...state.posts]\r\n//             stateCopy.posts.push(newPost)\r\n//             stateCopy.newPostText = ''\r\n        // state.posts.push(newPost)\r\n        // state.newPostText = ''\r\n        // return stateCopy\r\n        // case 'CHANGE-NEW-TEXT': {\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostText: action.newText\r\n        //     }\r\n        // }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SET-USERS-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let addPostAC = (newPostText: string) => ({type: \"ADD-POST\", newPostText} as const)\r\nexport let deletePostAC = (postId: number) => ({type: \"DELETE-POST\", postId} as const)\r\n// export let newTextChangeHandlerAC = (value: string) => ({type: \"CHANGE-NEW-TEXT\", newText: value} as const)\r\nexport let setUsersProfile = (profile: null) => ({type: \"SET-USERS-PROFILE\", profile} as const)\r\nexport let setStatus = (status: string) => ({type: \"SET-STATUS\", status} as const)\r\n\r\nexport let getStatus = (userId: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileApi.getStatus(userId)\r\n    dispatch(setStatus(response.data))\r\n}\r\n\r\nexport let updateStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileApi.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status))\r\n    }\r\n}\r\n\r\nexport let getUsersProfile = (userId: string) => async (dispatch: Dispatch) => {       //санка\r\n    let response = await userAPI.getProfile(userId)\r\n    dispatch(setUsersProfile(response.data))\r\n}\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof deletePostAC>\r\n    // | ReturnType<typeof newTextChangeHandlerAC>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport default profileReducer","D:\\it-camasutra\\social_network\\src\\redux\\auth-reducer.ts",[],"D:\\it-camasutra\\social_network\\src\\components\\Header\\Header.tsx",[],"D:\\it-camasutra\\social_network\\src\\redux\\users-reducer.ts",["193","194","195"],"import {userAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\n\r\nexport type UsersType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: { sity: string, country: string }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    isFetching: boolean\r\n    portionSize: number\r\n\r\n}\r\n\r\nexport const initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<Number>,\r\n    portionSize: 15\r\n}\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n                 users:\r\n                state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]   //старые юзеры + новые\r\n            }\r\n        case 'SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case \"SET-TOTAL-USERS-COUNT\":\r\n            return {...state, totalUsersCount: action.count}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFetching: action.isFetching}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let followsSuccess = (userId: number) => ({type: \"FOLLOW\", userId} as const)\r\nexport let unfollowSuccess = (userId: number) => ({type: \"UNFOLLOW\", userId} as const)\r\nexport let setUsers = (users: Array<UsersType>) => ({type: \"SET-USERS\", users} as const)\r\nexport let setCurrentPage = (currentPage: number) => ({type: \"SET-CURRENT-PAGE\", currentPage} as const)\r\nexport let setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: \"SET-TOTAL-USERS-COUNT\",\r\n    count: totalUsersCount\r\n} as const)\r\nexport let toggleIsFetching = (isFetching: boolean) => ({type: \"TOGGLE-IS-FETCHING\", isFetching} as const)\r\nexport let toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: \"TOGGLE-IS-FOLLOWING-PROGRESS\",\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        let data = await userAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nlet followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`,{}, {\r\n    //     withCredentials: true,\r\n    //     headers: {\r\n    //         \"API-KEY\": \"45e88326-78f0-45ca-b953-491c7fd66778\"\r\n    //     }\r\n    //     })\r\n\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userId), followsSuccess)\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userId), unfollowSuccess)\r\n    }\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof followsSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport default usersReducer","D:\\it-camasutra\\social_network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\it-camasutra\\social_network\\src\\utils\\object-helpers.ts",["196"],"D:\\it-camasutra\\social_network\\src\\components\\Login\\Login.tsx",[],"D:\\it-camasutra\\social_network\\src\\redux\\redux-store.ts",["197"],"import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport thunk  from \"redux-thunk\"\r\nimport usersReducer from \"./users-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport  { reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// import sidebarReducer from \"./sidebar-reducer\";\r\n\r\nexport let rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n    // sidebar: sidebarReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n//  const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)\r\n// ));\r\n\r\nlet store = createStore(rootReducer , applyMiddleware(thunk))\r\n\r\n\r\nexport default store",["198","199"],"D:\\it-camasutra\\social_network\\src\\components\\Header\\HeaderContainer.tsx",[],"D:\\it-camasutra\\social_network\\src\\hoc\\WithAuthRedirect.tsx",["200"],"import React, {Component, ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType={\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType=> {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function WithAuthRedirect <T>(Component:ComponentType<T>) {\r\n    const RedirectComponent=(props: mapStateToPropsType) =>{\r\n        let {isAuth, ...resProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>        //this.props.isAuth === false\r\n        return (\r\n            <Component {...resProps as T}/>\r\n        )\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n\r\n}","D:\\it-camasutra\\social_network\\src\\utils\\paginator\\paginator.tsx",["201","202"],"import react, {useState} from 'react'\r\nimport cn from 'classnames'\r\nimport styles from './paginator.module.css'\r\nimport style from \"../../components/Users/Users.module.css\";\r\n// import React from \"react\";\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    onPageChanged: (p: number) => void\r\n    portionSize: number\r\n}\r\n\r\nlet Paginator = ({currentPage, totalUsersCount, pageSize, onPageChanged, portionSize}: PaginatorPropsType) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {portionNumber > 1 &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber - 1)\r\n                }}>PREV </button>\r\n                }\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span className={cn({\r\n                            [styles.selectedPage]: currentPage === p\r\n                        }, styles.pageNumber)}\r\n                                     key={p}\r\n                                     onClick={(e) => {\r\n                                         onPageChanged(p)\r\n                                     }}>{p} </span>\r\n                    })}\r\n                {portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>NEXT </button>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Paginator\r\n","D:\\it-camasutra\\social_network\\src\\components\\Users\\User.tsx",[],"D:\\it-camasutra\\social_network\\src\\redux\\dialogs-reducer.ts",[],"D:\\it-camasutra\\social_network\\src\\components\\Music\\Music.tsx",["203"],"import s from './Music.module.css'\r\nimport React from \"react\";\r\n\r\nfunction Music (){\r\n    return(\r\n        <div>\r\n    music\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music","D:\\it-camasutra\\social_network\\src\\components\\Profile\\ProfileContainer.tsx",["204"],"D:\\it-camasutra\\social_network\\src\\hoc\\WithSuspense.tsx",[],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"205","replacedBy":"209"},{"ruleId":"207","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":9},{"ruleId":"215","severity":1,"message":"216","line":48,"column":5,"nodeType":"217","messageId":"218","endLine":50,"endColumn":6},{"ruleId":"205","replacedBy":"219"},{"ruleId":"207","replacedBy":"220"},{"ruleId":"211","severity":1,"message":"221","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"212","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":9},{"ruleId":"211","severity":1,"message":"222","line":3,"column":8,"nodeType":"213","messageId":"214","endLine":3,"endColumn":15},{"ruleId":"211","severity":1,"message":"223","line":3,"column":18,"nodeType":"213","messageId":"214","endLine":3,"endColumn":28},{"ruleId":"205","replacedBy":"224"},{"ruleId":"207","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":19,"column":17,"nodeType":"228","endLine":19,"endColumn":82},{"ruleId":"211","severity":1,"message":"229","line":4,"column":16,"nodeType":"213","messageId":"214","endLine":4,"endColumn":27},{"ruleId":"211","severity":1,"message":"230","line":6,"column":9,"nodeType":"213","messageId":"214","endLine":6,"endColumn":17},{"ruleId":"231","severity":1,"message":"232","line":38,"column":63,"nodeType":"233","messageId":"234","endLine":38,"endColumn":65},{"ruleId":"211","severity":1,"message":"235","line":3,"column":9,"nodeType":"213","messageId":"214","endLine":3,"endColumn":28},{"ruleId":"231","severity":1,"message":"232","line":81,"column":65,"nodeType":"233","messageId":"234","endLine":81,"endColumn":67},{"ruleId":"231","severity":1,"message":"236","line":124,"column":34,"nodeType":"233","messageId":"234","endLine":124,"endColumn":36},{"ruleId":"211","severity":1,"message":"237","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"238","line":1,"column":56,"nodeType":"213","messageId":"214","endLine":1,"endColumn":63},{"ruleId":"205","replacedBy":"239"},{"ruleId":"207","replacedBy":"240"},{"ruleId":"211","severity":1,"message":"241","line":1,"column":16,"nodeType":"213","messageId":"214","endLine":1,"endColumn":25},{"ruleId":"211","severity":1,"message":"237","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":13},{"ruleId":"211","severity":1,"message":"242","line":4,"column":8,"nodeType":"213","messageId":"214","endLine":4,"endColumn":13},{"ruleId":"211","severity":1,"message":"212","line":1,"column":8,"nodeType":"213","messageId":"214","endLine":1,"endColumn":9},{"ruleId":"231","severity":1,"message":"232","line":54,"column":44,"nodeType":"233","messageId":"234","endLine":54,"endColumn":46},"no-native-reassign",["243"],"no-negated-in-lhs",["244"],["243"],["244"],"@typescript-eslint/no-unused-vars","'s' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["243"],["244"],"'React' is defined but never used.","'MyPosts' is defined but never used.","'PropsArray' is defined but never used.",["243"],["244"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'ChangeEvent' is defined but never used.","'Redirect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'updateObjectInArray' is defined but never used.","Expected '===' and instead saw '=='.","'react' is defined but never used.","'compose' is defined but never used.",["243"],["244"],"'Component' is defined but never used.","'style' is defined but never used.","no-global-assign","no-unsafe-negation"]